@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<ul>
    @foreach(var message in _message)
    {
        <li>@message</li>
    }
</ul>

@code{
    private HubConnection? hubConnection;
    private readonly List<string> _message = new();

    protected override async Task OnInitializedAsync()
    {
        //Move URL and token to appsettings
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://localhost:7032/RaceData",
        o => o.AccessTokenProvider = () => Task.FromResult<string?>("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IlRzbEFwcCIsInN1YiI6IlRzbEFwcCIsImp0aSI6IjQ4OWZlMmE0IiwiYXVkIjpbImh0dHA6Ly9sb2NhbGhvc3Q6MTEwMyIsImh0dHBzOi8vbG9jYWxob3N0OjQ0MzAxIiwiaHR0cDovL2xvY2FsaG9zdDo1MTI4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzAzMiJdLCJuYmYiOjE3Mzc4NDkyODEsImV4cCI6MTc0NTYyNTI4MSwiaWF0IjoxNzM3ODQ5MjgyLCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0._Esz44m3wKRKTHwEb4dN-8VqMBcXLmrPiTqRWRxwS0Y"))
        .ConfigureLogging(logging =>
        {
            // Log to the Console
            logging.AddConsole();

            // This will set ALL logging to Debug level
            logging.SetMinimumLevel(LogLevel.Debug);
        })
        .Build();

        hubConnection.On<string>("ServerMessage", message =>
        {
            _message.Add(message);
            InvokeAsync(StateHasChanged);//Invoke async needed still?
        });

        await hubConnection.StartAsync();
    }

    //Tidy up connection
    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
