@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using TslCompetencyTaskUi.Models.Builders
@using TslCompetencyTaskUi.Models.Classes
@using TslCompetencyTaskUi.Models.Classes.Interfaces
@using TslCompetencyTaskUi.Models.Dtos
@inject IOptions<Config>? config
@implements IAsyncDisposable

<!--Use Finished flag for animated checkered flag on side-->
<!--Also make nicer-->
<table>
    <tr>
        <th>Name</th>
        <th>Number</th>
        <th>Team</th>
        <th>Class</th>
        <th>Position</th>
        <th>Lap</th>
        <th>Fastest Lap</th>
        <th>Last Lap</th>
        <th colspan="3">Current Split</th>
    </tr>
    @if (isLoaded)
    {
        @foreach (Competitor competitor in raceData.Classification)
        {
            <tr>
                <td>@competitor.Name</td>
                <td>@competitor.StartNumber</td>
                <td>@competitor.TeamName</td>
                <td>@competitor.ClassName</td>
                <td>@competitor.Position</td>
                <td>@competitor.Laps</td>
                <td>@competitor.FastestLapTime.Display</td>
                <td>@competitor.LastLapTime.Display</td>
                @foreach (KeyValuePair<string, Time?> splits in competitor.CurrentLapSectorTimes)
                {
                    <td colspan="1">@splits.Value.Display</td>
                }
            </tr>
        }
    }
    else
    {
        //Do loading css
    }

</table>

@code{
    private HubConnection? hubConnection;
    private readonly List<string> _message = new();
    private RaceData raceData = new RaceData();
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        //Move URL and token to appsettings
        hubConnection = new HubConnectionBuilder()
        .WithUrl(config.Value.ConnectionString,
        o => o.AccessTokenProvider = () => Task.FromResult<string?>(config.Value.JWTBearer))
        .ConfigureLogging(logging =>
        {
            // Log to the Console
            logging.AddConsole();

            // This will set ALL logging to Debug level
            logging.SetMinimumLevel(LogLevel.Debug);
        })
        .Build();

        hubConnection.On<RaceDataDto>("SendRaceData", data =>
        {
            raceData = new RaceDataBuilder()
            .AddSessionId(data.sessionId)
            .AddDuration(data.duration)
            .AddSessionState(data.sessionState)
            .AddStartTime(data.startTime)
            .AddTrack(data.track)
            .AddSeries(data.series)
            .AddTimeRemaining(data.timeRemaining)
            .AddClassification(data.classification)
            .Build();
            isLoaded = true;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    //Tidy up connection
    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
