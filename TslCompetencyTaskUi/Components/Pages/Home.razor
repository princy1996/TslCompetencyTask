@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using TslCompetencyTaskUi.Models.Builders
@using TslCompetencyTaskUi.Models.Classes
@using TslCompetencyTaskUi.Models.Classes.Interfaces
@using TslCompetencyTaskUi.Models.Dtos
@inject IOptions<Config>? config
@implements IAsyncDisposable

<!--Use Finished flag for animated checkered flag on side-->
<!--Also make nicer-->
<div class="card">

    @if (isLoaded)
    {
        <div class="card-header">
            <!-- table for QuickLayout-->
            <table>
                <tr class="NoBoarder">
                    <td colspan="3">
                        <h2 class="card-text">@currentRaceData.Series</h2>
                    </td>
                </tr>
                <tr class="NoBoarder">
                    <td colspan="3">
                        <h3 class="card-text">@currentRaceData.Track</h3>
                    </td>
                </tr>
                <tr class="NoBoarder">
                    <td colspan="1">
                        <h4 class="card-text">@currentRaceData.Duration</h4>
                    </td>
                    <td colspan="1">
                        <h4 class="card-text">@currentRaceData.StartTime</h4>
                    </td>
                    <td colspan="1">
                        <h4 class="card-text">@currentRaceData.TimeRemaining</h4>
                    </td>
                </tr>
            </table>

        </div>
        <div class="card-body">
            <article>
                <table>
                    <tr class="header">
                        <th>Name</th>
                        <th>Number</th>
                        <th>Team</th>
                        <th>Class</th>
                        <th>Position</th>
                        <th>Lap</th>
                        <th>Fastest Lap</th>
                        <th>Last Lap</th>
                        <th colspan="3">Current Split</th>
                    </tr>
                    @foreach (Competitor competitor in currentRaceData.Classification)
                    {
                        <tr class="trackRow @(BetterPlace(competitor))">
                            <td>@competitor.Name</td>
                            <td>@competitor.StartNumber</td>
                            <td>@competitor.TeamName</td>
                            <td>@competitor.ClassName</td>
                            <td>@competitor.Position</td>
                            <td>@competitor.Laps</td>
                            <td class="@(FasterTime(competitor)?"updateFastestLap":"")">@competitor.FastestLapTime.Display</td>
                            <td>@competitor.LastLapTime.Display</td>
                            @foreach (KeyValuePair<string, Time?> splits in competitor.CurrentLapSectorTimes)
                            {
                                <td colspan="1">@splits.Value.Display</td>
                            }
                        </tr>
                    }
                </table>
            </article>
        </div>
        <div class="card-footer" style="overflow-y: scroll; max-height: 20rem;">
            @foreach (string update in liveUpdates)
            {
                <p>@update</p>
            }
        </div>
    }
    else
    {
        //Do Table Load or fail
    }
</div>

@code{
    private HubConnection? hubConnection;
    private readonly List<string> _message = new();
    private RaceData currentRaceData = new RaceData();
    private RaceData previousRaceData = new RaceData();
    private List<string> liveUpdates = new List<string>();
    private bool isLoaded = false;
    private bool isFirstLoad = false;
    private readonly IConfig _config;

    protected override async Task OnInitializedAsync()
    {
        //Move URL and token to appsettings
        hubConnection = new HubConnectionBuilder()
        .WithUrl(config.Value.ConnectionString,
        o => o.AccessTokenProvider = () => Task.FromResult<string?>(config.Value.JWTBearer))
        .ConfigureLogging(logging =>
        {
            // Log to the Console
            logging.AddConsole();

            // This will set ALL logging to Debug level
            logging.SetMinimumLevel(LogLevel.Debug);
        })
        .Build();

        hubConnection.On<RaceDataDto>("SendRaceData", data =>
        {
            //Set session Id to joined Group in API?
            if (!isFirstLoad) previousRaceData = currentRaceData;
            currentRaceData = new RaceDataBuilder()
            .AddSessionId(data.sessionId)
            .AddDuration(data.duration)
            .AddSessionState(data.sessionState)
            .AddStartTime(data.startTime)
            .AddTrack(data.track)
            .AddSeries(data.series)
            .AddTimeRemaining(data.timeRemaining)
            .AddClassification(data.classification)
            .Build();
            isLoaded = true;
            InvokeAsync(StateHasChanged);
        });

        //Handle with Alert
        hubConnection.On<string>("ErrorNotification", message =>
        {
            _message.Add(message);
            InvokeAsync(StateHasChanged);
        });

        //Should set up other messages here

        await hubConnection.StartAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        isFirstLoad = firstRender;
        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Helper function for UI to return if a time is better or not
    /// </summary>
    /// <param name="comp"></param>
    /// <returns></returns>
    public bool FasterTime(Competitor comp)
    {
        //messy
        //Should be a Hub message and handled in the API
        //Not happy with any of this
        if (previousRaceData.SessionId == string.Empty || previousRaceData.SessionId == null || previousRaceData.Classification.Count == 0)
        {
            return false; ;
        }
        Competitor? oldComp = previousRaceData.Classification.Where(x => x.Id == comp.Id).SingleOrDefault();
        if (oldComp != null && oldComp.FastestLapTime.RawMs > comp.FastestLapTime.RawMs)
        {
            liveUpdates.Add($"{DateTime.UtcNow}: {comp.Name} has a new PB of {comp.FastestLapTime.Display}");
            return true;
        }
        else
        {
            return false;
        }
    }

    /// <summary>
    /// Helper function for UI to return if a position is better or not
    /// </summary>
    /// <param name="comp"></param>
    /// <returns></returns>
    public string BetterPlace(Competitor comp)
    {
        //tidy this, not good
        //Should be a Hub message and handled in the API
        //Not happy with any of this
        if (previousRaceData.SessionId == string.Empty || previousRaceData.SessionId == null || previousRaceData.Classification.Count == 0)
        {
            return "";
        }

        Competitor? oldComp = previousRaceData.Classification.Where(x => x.Id == comp.Id).SingleOrDefault();
        if (oldComp == null || oldComp.FastestLapTime.RawMs != 0)
        {
            return "";
        }

        if (oldComp.Position == comp.Position)
        {
            return "";
        }
        else if (oldComp.Position < comp.Position)
        {
            liveUpdates.Add($"{comp.Name} has gone down {Math.Abs(oldComp.Position!.Value - comp.Position!.Value)} Positions");
            return "updateWorsePos";
        }
        else
        {
            liveUpdates.Add($"{comp.Name} has gone up {Math.Abs(oldComp.Position!.Value - comp.Position!.Value)} Positions");
            return "updateBetterPos";
        }
    }

    //Tidy up connection
    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
